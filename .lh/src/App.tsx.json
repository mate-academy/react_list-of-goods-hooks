{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 100,
            "patches": [
                {
                    "date": 1712148983447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712148994179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149035184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149042512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n+import React, { useState } from 'react';import 'bulma/css/bulma.css';\n import './App.scss';\n \n import React, { useState } from 'react';\n import 'bulma/css/bulma.css';\n@@ -149,157 +148,4 @@\n       </ul>\n     </div>\n   );\n };\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n"
                },
                {
                    "date": 1712149048935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import React, { useState } from 'react';\n+\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149055260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,4 @@\n+import React from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n"
                },
                {
                    "date": 1712149068302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+import React, { useState } from 'react';\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149074494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149351716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  \n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149358753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149364294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = \n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149369889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? \n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149374954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === )\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149380384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET)\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149387712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? Sort)\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149394405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : )\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149400639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET)\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149406109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET) : sort\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149412762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET) : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149419637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149433388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: ac,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149641946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149647894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n \n   const actualSort = isReversed\n     ? (sortType === SortType.ALPHABET\n       ? SortType.LENGTH\n-      : SortType.ALPHABET\n+      : SortType.ALPHABET)\n     : sortType;\n \n   const reorderedGoods = getReorderedGoods(goods, {\n     sortType: actualSort,\n@@ -151,2566 +151,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: ac,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET) : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET) : sort\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : SortType.ALPHABET)\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? SortType.LENGTH : )\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET ? Sort)\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === SortType.ALPHABET)\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? (sortType === )\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed ? \n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = \n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  \n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-import React, { useState } from 'react';\n-\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import React, { useState } from 'react';import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-import React, { useState } from 'react';\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712149710064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \n         {!resetClicked && (\n           <button\n             type=\"button\"\n-            className=\"button is-danger is-light\"\n+            className=button is-danger is-light\"\n             onClick={reset}\n           >\n             Reset\n           </button>\n"
                },
                {
                    "date": 1712149719320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger  is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149724397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!i} is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149730023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? } is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149735389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light'} is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149743837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light' } is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149750719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light' : ''}`} is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149779877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET)\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light' : ''} is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149785742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \n         {!resetClicked && (\n           <button\n             type=\"button\"\n-            className={`button is-danger  is-light\"\n+            className={`button is-danger is-light\"\n             onClick={reset}\n           >\n             Reset\n           </button>\n"
                },
                {
                    "date": 1712149894777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? (sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType: actualSort,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149929703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const actualSort = isReversed\n+    ? sortType === SortType.ALPHABET\n+      ? SortType.LENGTH\n+      : SortType.ALPHABET\n+    : sortType;\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712149956724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150144715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light' : ''}`}\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150168039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className={`button is-danger ${!isReversed ? 'is-light' : ''}`}\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150224986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150252304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150277874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150292820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light' : }`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150306863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light' : ''&rbrace;`&rbrace;\n+          onClick={reversed}\n+        &gt;\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150313561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,159 +118,11 @@\n         </button>\n \n         <button\n           type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light' : ''&rbrace;`&rbrace;\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n           onClick={reversed}\n-        &gt;\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n         >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light' : }`}\n-          onClick={reversed}\n-        >\n           Reverse\n         </button>\n \n         {!resetClicked && (\n@@ -293,2432 +145,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light' : ''}`}\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light' : ''}`}\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light' : ''} is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light' : ''}`} is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light' } is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? 'is-light'} is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!isReversed ? } is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger ${!i} is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className={`button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const actualSort = isReversed\n-    ? (sortType === SortType.ALPHABET\n-      ? SortType.LENGTH\n-      : SortType.ALPHABET)\n-    : sortType;\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType: actualSort,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712150318966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150456808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+          \n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150466610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150517472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150524718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150555385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'i' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150564041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150587733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-acti' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150593899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-acti' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150608287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-activ' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150625547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150679086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150760512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,164 +102,16 @@\n     <div className=\"section content\">\n       <div className=\"buttons\">\n         <button\n           type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'is-light'}`}\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'i'}`}\n           onClick={sortAlphabetically}\n         >\n           Sort alphabetically\n         </button>\n \n         <button\n           type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n           className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n           onClick={sortByLength}\n         >\n           Sort by length\n@@ -293,1633 +145,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-activ' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-acti' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-acti' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'i' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-          \n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712150768341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150777789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150857270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={(sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150868461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically()\n+          }\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150873934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            set\n+          }\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150879543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed()\n+          }\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150887937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false)\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150900509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,18 +105,18 @@\n           type=\"button\"\n           className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n           onClick={() => {\n             sortAlphabetically();\n-            setIsReversed(false)\n+            setIsReversed(false);\n           }}\n         >\n           Sort alphabetically\n         </button>\n \n         <button\n           type=\"button\"\n           className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n+          onClick={()sortByLength}\n         >\n           Sort by length\n         </button>\n \n@@ -148,1048 +148,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed()\n-          }\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            set\n-          }\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically()\n-          }\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={(sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : 'i'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712150908489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength()\n+          }\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150914626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setis\n+          }\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150920086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150934361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={r()eversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150939509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={r() => {\n+            </div>eversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150945182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={r() => {\n+          </div>eversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150950261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={r() => {\n+        </div>eversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150955549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+        eversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150965480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+        reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150973827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            reversed();\n+\n+          }\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150981357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            reversed();\n+            set\n+          }\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150988322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            reversed();\n+            setSortType(Sort)\n+          }\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712150995631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortByLength();\n+            setIsReversed(false);\n+          }}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            reversed();\n+            setSortType(SortType.NONE);\n+          }}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151019499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={() => {\n+            sortAlphabetically();\n+            \n+          }\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151036931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 's-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151052286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151063281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151083313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(true);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151090234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,156 +118,8 @@\n         </button>\n \n         <button\n           type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n           className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n           onClick={reversed}\n         >\n           Reverse\n@@ -293,2620 +145,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : 's-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            \n-          }\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            reversed();\n-            setSortType(SortType.NONE);\n-          }}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            reversed();\n-            setSortType(Sort)\n-          }\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            reversed();\n-            set\n-          }\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            reversed();\n-\n-          }\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-        reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-        eversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={r() => {\n-        </div>eversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={r() => {\n-          </div>eversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={r() => {\n-            </div>eversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={r()eversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setIsReversed(false);\n-          }\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength();\n-            setis\n-          }\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortByLength()\n-          }\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(true);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? 'is-active' : ''}`}\n-          onClick={() => {\n-            sortAlphabetically();\n-            setIsReversed(false);\n-          }}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? 'is-active' : ''}`}\n-          onClick={()sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : ''}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712151307380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     setResetClicked(false);\n   };\n \n   const reversed = () => {\n-    setIsReversed(true);\n+    setIsReversed(!is);\n     setResetClicked(false);\n   };\n \n   const reset = () => {\n"
                },
                {
                    "date": 1712151335528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed();\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712151344373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(fal);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  // console.log(reorderedGoods);\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152059144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+// DON'T save goods to the state\n+// type State = {\n+//   isReversed: boolean,\n+//   sortType: SortType,\n+// };\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152155382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+export function getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152440013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152451776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, {  from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152463106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,146 +1,6 @@\n import 'bulma/css/bulma.css';\n import './App.scss';\n-import React, {  from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-const getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(!isReversed);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n import React, { useState } from 'react';\n \n export const goodsFromServer = [\n   'Dumplings',\n@@ -166,9 +26,9 @@\n   isReversed: boolean;\n };\n \n // Use this function in the render method to prepare goods\n-const getReorderedGoods(\n+export const getReorderedGoods(\n   goods: string[],\n   { sortType, isReversed }: ReorderOptions,\n ) {\n   // To avoid the original array mutation\n@@ -277,734 +137,4 @@\n       </ul>\n     </div>\n   );\n };\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(!isReversed);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(!isReversed);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(fal);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed();\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n-import 'bulma/css/bulma.css';\n-import './App.scss';\n-import React, { useState } from 'react';\n-\n-export const goodsFromServer = [\n-  'Dumplings',\n-  'Carrot',\n-  'Eggs',\n-  'Ice cream',\n-  'Apple',\n-  'Bread',\n-  'Fish',\n-  'Honey',\n-  'Jam',\n-  'Garlic',\n-];\n-\n-enum SortType {\n-  NONE,\n-  ALPHABET,\n-  LENGTH,\n-}\n-\n-type ReorderOptions = {\n-  sortType: SortType;\n-  isReversed: boolean;\n-};\n-\n-// Use this function in the render method to prepare goods\n-export function getReorderedGoods(\n-  goods: string[],\n-  { sortType, isReversed }: ReorderOptions,\n-) {\n-  // To avoid the original array mutation\n-  const visibleGoods = [...goods];\n-\n-  // Sort and reverse goods if needed\n-  switch (sortType) {\n-    case SortType.ALPHABET:\n-      visibleGoods.sort((a, b) => a.localeCompare(b));\n-      break;\n-    case SortType.LENGTH:\n-      visibleGoods.sort((a, b) => a.length - b.length);\n-      break;\n-    default:\n-      break;\n-  }\n-\n-  if (isReversed) {\n-    visibleGoods.reverse();\n-  }\n-\n-  // eslint-disable-next-line no-console\n-  console.log(sortType, isReversed);\n-\n-  return visibleGoods;\n-}\n-\n-// DON'T save goods to the state\n-// type State = {\n-//   isReversed: boolean,\n-//   sortType: SortType,\n-// };\n-\n-export const App: React.FC = () => {\n-  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n-  const [isReversed, setIsReversed] = useState<boolean>(false);\n-  const [resetClicked, setResetClicked] = useState<boolean>(true);\n-  const goods = goodsFromServer;\n-\n-  const sortAlphabetically = () => {\n-    setSortType(SortType.ALPHABET);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const sortByLength = () => {\n-    setSortType(SortType.LENGTH);\n-    setIsReversed(false);\n-    setResetClicked(false);\n-  };\n-\n-  const reversed = () => {\n-    setIsReversed(!is);\n-    setResetClicked(false);\n-  };\n-\n-  const reset = () => {\n-    setSortType(SortType.NONE);\n-    setResetClicked(true);\n-    setIsReversed(false);\n-  };\n-\n-  const reorderedGoods = getReorderedGoods(goods, {\n-    sortType,\n-    isReversed,\n-  });\n-\n-  // console.log(reorderedGoods);\n-\n-  return (\n-    <div className=\"section content\">\n-      <div className=\"buttons\">\n-        <button\n-          type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortAlphabetically}\n-        >\n-          Sort alphabetically\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n-          onClick={sortByLength}\n-        >\n-          Sort by length\n-        </button>\n-\n-        <button\n-          type=\"button\"\n-          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n-          onClick={reversed}\n-        >\n-          Reverse\n-        </button>\n-\n-        {!resetClicked && (\n-          <button\n-            type=\"button\"\n-            className=\"button is-danger is-light\"\n-            onClick={reset}\n-          >\n-            Reset\n-          </button>\n-        )}\n-      </div>\n-\n-      <ul>\n-        {reorderedGoods.map((good: string) => (\n-          <li data-cy=\"Good\" key={good}>\n-            {good}\n-          </li>\n-        ))}\n-      </ul>\n-    </div>\n-  );\n-};\n"
                },
                {
                    "date": 1712152473445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+) {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152493226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152499937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods(\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152582633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+}\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712152593710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods = (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+};\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712153016000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods = (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+};\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} `}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712153022045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods = (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+};\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} ${isReversed}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712153033030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods = (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+};\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} ${isReversed ? 'is-acti'}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'}`}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1712153041399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     <div className=\"section content\">\n       <div className=\"buttons\">\n         <button\n           type=\"button\"\n-          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} ${isReversed ? 'is-active' : }`}\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} ${isReversed ? 'is-active' : ''}`}\n           onClick={sortAlphabetically}\n         >\n           Sort alphabetically\n         </button>\n"
                },
                {
                    "date": 1712153082936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import 'bulma/css/bulma.css';\n+import './App.scss';\n+import React, { useState } from 'react';\n+\n+export const goodsFromServer = [\n+  'Dumplings',\n+  'Carrot',\n+  'Eggs',\n+  'Ice cream',\n+  'Apple',\n+  'Bread',\n+  'Fish',\n+  'Honey',\n+  'Jam',\n+  'Garlic',\n+];\n+\n+enum SortType {\n+  NONE,\n+  ALPHABET,\n+  LENGTH,\n+}\n+\n+type ReorderOptions = {\n+  sortType: SortType;\n+  isReversed: boolean;\n+};\n+\n+// Use this function in the render method to prepare goods\n+const getReorderedGoods = (\n+  goods: string[],\n+  { sortType, isReversed }: ReorderOptions,\n+): string[] => {\n+  // To avoid the original array mutation\n+  const visibleGoods = [...goods];\n+\n+  // Sort and reverse goods if needed\n+  switch (sortType) {\n+    case SortType.ALPHABET:\n+      visibleGoods.sort((a, b) => a.localeCompare(b));\n+      break;\n+    case SortType.LENGTH:\n+      visibleGoods.sort((a, b) => a.length - b.length);\n+      break;\n+    default:\n+      break;\n+  }\n+\n+  if (isReversed) {\n+    visibleGoods.reverse();\n+  }\n+\n+  // eslint-disable-next-line no-console\n+  console.log(sortType, isReversed);\n+\n+  return visibleGoods;\n+};\n+\n+export const App: React.FC = () => {\n+  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n+  const [isReversed, setIsReversed] = useState<boolean>(false);\n+  const [resetClicked, setResetClicked] = useState<boolean>(true);\n+  const goods = goodsFromServer;\n+\n+  const sortAlphabetically = () => {\n+    setSortType(SortType.ALPHABET);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const sortByLength = () => {\n+    setSortType(SortType.LENGTH);\n+    setIsReversed(false);\n+    setResetClicked(false);\n+  };\n+\n+  const reversed = () => {\n+    setIsReversed(!isReversed);\n+    setResetClicked(false);\n+  };\n+\n+  const reset = () => {\n+    setSortType(SortType.NONE);\n+    setResetClicked(true);\n+    setIsReversed(false);\n+  };\n+\n+  const reorderedGoods = getReorderedGoods(goods, {\n+    sortType,\n+    isReversed,\n+  });\n+\n+  return (\n+    <div className=\"section content\">\n+      <div className=\"buttons\">\n+        <button\n+          type=\"button\"\n+          className={`button is-info ${sortType === SortType.ALPHABET && !isReversed ? '' : 'is-light'} ${isReversed ? 'is-active' : ''}`}\n+          onClick={sortAlphabetically}\n+        >\n+          Sort alphabetically\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-success ${sortType === SortType.LENGTH && !isReversed ? '' : 'is-light'} `}\n+          onClick={sortByLength}\n+        >\n+          Sort by length\n+        </button>\n+\n+        <button\n+          type=\"button\"\n+          className={`button is-warning ${isReversed ? 'is-active' : 'is-light'}`}\n+          onClick={reversed}\n+        >\n+          Reverse\n+        </button>\n+\n+        {!resetClicked && (\n+          <button\n+            type=\"button\"\n+            className=\"button is-danger is-light\"\n+            onClick={reset}\n+          >\n+            Reset\n+          </button>\n+        )}\n+      </div>\n+\n+      <ul>\n+        {reorderedGoods.map((good: string) => (\n+          <li data-cy=\"Good\" key={good}>\n+            {good}\n+          </li>\n+        ))}\n+      </ul>\n+    </div>\n+  );\n+};\n"
                }
            ],
            "date": 1712148983447,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\n"
        }
    ]
}